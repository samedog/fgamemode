#!/bin/bash
##########################################################################################
# By Diego Cardenas "The Samedog" under GNU GENERAL PUBLIC LICENSE Version 2, June 1991
# (www.gnu.org/licenses/old-licenses/gpl-2.0.html) e-mail: the.samedog[]gmail.com.
# https://github.com/samedog/fgamemode
##########################################################################################
# This now runs on Pop!_OS
# PUPPY = 1 PuppyLinux or pupy based distro
# PUPPY = 2 POP!_OS
# maybe i sould renice all spawns of a game? i dunno really since steam opens
# more processes for a game than lutris or wine (directly using wine), maybe 
# that will undermine the overall performance , gotta investigate on that

INT='^[0-9]+$'
DETECTED=""
GAME_DATABASE=$(</usr/share/fgamemode/games.txt)
PID=""

if [[ -f "/etc/os-release" ]]; then
    if [[ $(tail /etc/os-release | grep -m1 "NAME" | cut -d'=' -f'2') == *"Pop!_OS"* ]];then
	echo 'Running on Pop!_OS ( supported distro )'
	PUPPY=2
    fi
elif [[ -f "/etc/rc.d/PUPSTATE" ]]; then
    PUPPY=1
    echo 'Running on Puppy Linux or a "Pupplet" distro.'
else
    ##TODO: add support for other distros maybe?? dunno
    PUPPY=0
    echo "Running an unsupported distro daemon will stop now"
    exit
fi

function POWER_MIZER(){
    CURR_PO_MIZER=$(nvidia-settings -q [gpu]/GpuPowerMizerMode | grep -i attribute | rev | cut -d' ' -f1 | rev | sed 's/\.//g')
    if [ $CURR_PO_MIZER -ne 1 ];then
        nvidia-settings -a "GpuPowerMizerMode=1"
        SET_PWM=1
    else
        SET_PWM=0
    fi
}


function DISK_detect(){
    GAME_PID="$1"
    EXEC_NAME="$2"
    EXEC_FLAG=0
    if [[ $PUPPY -ne 0 ]] ; then
        BINARY_type $EXEC_NAME
        if [ $EXEC_FLAG == 2 ];then
            GAME_PATH=$(tail /proc/$GAME_PID/cmdline | cut -d':' -f'2')
            GAME_PATH=$(echo $GAME_PATH | sed 's+\\+/+g') #normalize
            #echo "normalized $GAME_PATH"
        else
            GAME_PATH=$( tail /proc/$GAME_PID/cmdline)       
        fi
        #echo "game path is: $GAME_PATH"
        
        if [[ "$GAME_PATH" == *"mnt"* ]];then
            GAME_DISK=$( echo $GAME_PATH | sed 's+/mnt/++g' | cut -d'/' -f 1 )
        elif [[ "$GAME_PATH" == *"media"* ]];then
            GAME_DISK=$( echo $GAME_PATH | sed 's+/media/++g' | cut -d'/' -f 1 )
        else
            #running on /, gotta determine what drive is "/" on
            if [[ $PUPPY -eq 2 ]];then
            	GAME_DISK=$( grep -w "/" /etc/mtab | cut -d' ' -f1 | rev | cut -d'/' -f1 | rev )
            else
                GAME_DISK=$( head -n 1 /etc/mtab | cut -d' ' -f1 | rev | cut -d'/' -f1 | rev )
            fi
        fi
        
        if [[ "$GAME_DISK" != *"nvme"* ]];then
            NVME=0
            echo "game running on an hdd"
            COUNT=$( echo $GAME_PATH | grep -o "/" | wc -l )
            IFS='/' read -ra field <<< "$GAME_PATH"
            for i in "${field[@]}"
            do 
                if [[ $i =~ ^sd[a-z]+[0-9]*$ ]];then
                    GAME_DISK="$i"
                fi
            done
            HDD_sched $GAME_DISK ## pass to hdd scheduler function
        else
            echo "game running on a nvme ssd, no need for re-schedule"
            NVME=1
        fi
    else
        true
    fi
    
}
function GPU_detect(){
# TODO: add real detection for AMD and Intel GPUs 
    NV_prob_flag=0
    IT_prob_flag=0
    AMD_prob_flag=0
    GPU_probable_vendor="$(grep glx /var/log/Xorg.0.log | grep vendor) | grep -v \"X.Org\""
    
    if echo $GPU_probable_vendor | grep -iqF "nvidia";then
        echo "Probably using an NVIDIA GPU"
        NV_prob_flag=1
    elif echo $GPU_probable_vendor | grep -iqF "intel";then
        echo "Probably using an Intel GPU"
        IT_prob_flag=1
    elif echo $GPU_probable_vendor | grep -iqF "amd";then
        echo "Probably using an AMD GPU"
        AMD_prob_flag=1
    else
        echo "No accelerated GPU or open source driver detected, terminating"
        exit
    fi

    if [ $NV_prob_flag == 1 ];then
        NV_try=$(nvidia-settings --v | grep "version")
        if echo $NV_try | grep -iqF "nvidia";then
            echo "Nvidia driver confirmed by nvidia-settings"
            GPU="nvidia"
        fi
    elif [ $IT_prob_flag == 1 ];then
        true
        ##to-do
    elif [ $AMD_prob_flag == 1 ];then
        true
        ##to-do
    fi

}

function HDD_sched(){
    GAME_DISK="$1"
    GAME_DISK_ROOT=$(echo $GAME_DISK | sed 's/[0-9]*//g')
    SCHEDS="/sys/block/$GAME_DISK_ROOT/queue/scheduler"
    ORIG_SCHED=$(grep -oP '\[.*?\]' $SCHEDS | sed 's/[][]//g')
    SCHED_LIST=$(tail $SCHEDS | sed 's/[][]//g')
    if [[ $ORIG_SCHED != "kyber" ]] && [[ $ORIG_SCHED != "bfq" ]];then
        SET_IOSCHD=1
        ## ordered by average performance based on lots of charts and youtube videos
        if [[ "$SCHED_LIST" == *"bfq"* ]];then
            echo "Setting I/O scheduler: bfq"
            echo bfq > /sys/block/"$GAME_DISK_ROOT"/queue/scheduler
            CURR_SCHED="bfq"
        elif [[ "$SCHED_LIST" == *"kyber"* ]];then
            echo "Setting I/O scheduler: kyber"
            echo kyber > /sys/block/"$GAME_DISK_ROOT"/queue/scheduler
            CURR_SCHED="kyber"
        elif [[ "$SCHED_LIST" == *"mq-deadline"* ]];then
            echo "Setting I/O scheduler: mq-deadlines"
            echo mq-deadline > /sys/block/"$GAME_DISK_ROOT"/queue/scheduler
            CURR_SCHED="mq-deadline"
        else
            SET_IOSCHD=0
        fi
    fi
}

function BINARY_type(){
    ##is it a wine game or a linux game?
    EXEC_NAME="$1"
    if [[ "$EXEC_NAME" == *".exe"* ]];then
        EXEC_FLAG=2
    else
        EXEC_FLAG=1
    fi  
}

function detector() {
    if [[ $GAME_EXEC == *".exe"  ]]; then
	#echo "Dealing with a Steam/Wine/Lutris game, adjusting..."
	#this omits any log spawned binary or tmp spawned binary to better pinpoint the
	#game PID on multithreads
	PID=$(ps ax | grep "$GAME_EXEC" | grep -v grep | grep ':\\' | grep -v log | grep -v tmp | awk '{print $1}')
    else
    	#Usually linux native games spawn children in a way the PID is easily found 
    	PID=$(ps ax | grep "$GAME_EXEC" | grep -v grep | awk '{print $1}')
	#echo "find_game_pid just found $PID for $EXEC_NAME"
    fi
    #echo "found PID: $PID"
}

function temp_control() {
#temp monitor because no one is happy with a blowed cpu right?
AMD_TEMP=$(sensors | grep -i "tctl" | cut -d'+' -f2 | cut -d"." -f1)
AMD_BOOST=/sys/devices/system/cpu/cpufreq/boost
AMD_BOOST_NOW=$(tail $AMD_BOOST)
INTEL_TEMP=0
    if [[ $1 != "" ]];then
    	echo "ensuring boost is enabled after game is closed"
	if [[ $AMD_TEMP -gt 0 ]];then
    	     echo "1" > "$AMD_BOOST"
	elif [[ $INTEL_TEMP -gt 0 ]];then
	    #todo
	    true
	fi
    else 
	if [[ $AMD_TEMP -gt 0 ]];then
            #95° is the safe spot (according to me) it means the tenmp is rapidly scaling
            #and may be near to 100° which is no good at all, we can sacrifice a bit of
            #performance to keep the CPU safe.
	    if [[ $AMD_TEMP -ge 95 ]] && [[ $AMD_BOOST_NOW -eq 1 ]];then
	    	#expect 10%~15% less performance if the game is multi-thread heavy
	    	#I strongly believe this is quite a good trade off.
	    	echo "disabling boost to avoid overheat or thermal throttling"
	    	echo "0" > "$AMD_BOOST"
	    fi
	    #knowing my ryzen, 65° is a safe temp to turn boost on again it means the game is
	    #doing non heavy cpu stuff and we can afford to give more performance in exchange 
	    #for some temp increase.
	    if [[ $AMD_TEMP -lt 65  ]] && [[ $AMD_BOOST_NOW -eq 0 ]];then
		echo "Heavy thermal load seems to have ended, re-enabling boost"
	    	echo "1" > "$AMD_BOOST"
	    fi 
	elif [[ $INTEL_TEMP -gt 0 ]];then
	    #todo
	    true
	fi
    fi
}

GPU_detect

##the main loop comes after the GPU detection because we don't need to redetect the GPU
##on each loop run, also, it's very primitive but it does the job
while true
do
    if [ "$DETECTED" == "" ];then
        while IFS= read -r GAME
        do
            GAME_EXEC=$(echo $GAME | cut -d'|' -f1)
            GAME_NAME=$(echo $GAME | cut -d'|' -f2)
            detector "$GAME_EXEC"

	    GAME_PID=$PID
	    if [[ $GAME_PID =~ $INT ]] ; then
		DETECTED="$GAME_NAME"
		echo "$DETECTED detected entering game mode"
		DISK_detect $GAME_PID $GAME_EXEC

	        ## This is a placeholder for games with inverted priority issues (Fallout 76 WAS one)
		 if echo $GAME_EXEC | grep -iqF "PriorityInversion";then
		    PR_IN_FLAG=1
		else
		    PR_IN_FLAG=0
		fi
		
		##we chek the current CPU governor and ensure it's set to performance
		ORIG_GOVN=$(tail /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
		if [ $ORIG_GOVN != "performance" ];then
		    echo "Setting performance CPU governor"
		    for i in `ls -d1 /sys/devices/system/cpu/cpu[0-9]*`; do
			echo "performance" > "$i"/cpufreq/scaling_governor
		    done
		    SET_PERF=1 #so we can go back top revious governor later
		else
		    SET_PERF=0
		fi
		if [ $PR_IN_FLAG == 1 ];then
		    ## renice to -5 worked wonders on inverted prio so i'm keeping it as default
		    ## haven't seen any reports on protondb or proton github issue tracker for any other 
		    ## games for now, and Fallout 76 was fixed some time ago
		    echo "renicing $GAME_NAME to -5"
		    renice -n 5 -p $GAME_PID
		else
		    ##renice the game process, default is renice to -12
		    echo "renicing $GAME_NAME to -20"
		    renice -n -20 -p $GAME_PID
		fi

		##if the kernel supports low-latency scheduling we use SCHED_ISO or SCHED_NORMAL
		## to avoid SCHED_RR because it can cause weird behaviour if the program hangs
		
		SCHED_NORMAL=$(dmesg | grep -i "tt cpu")
		MuQSS=$(dmesg | grep -i muqss | grep -i Kolivas | cut -d' ' -f1)
		if [[ $SCHED_NORMAL == *"TT CPU"* ]];then
		    if [ $PR_IN_FLAG == 1 ];then
			TT_cpu=0
		    else
			echo "setting CPU sched of game to SCHED_NORMAL"
			schedtool -N $GAME_PID
		    fi

		elif [[ $MuQSS == "MuQSS" ]];then
		    if [ $PR_IN_FLAG == 1 ];then
			ISO_cpu=0
		    else
			echo "setting CPU sched to SCHED_ISO"
			schedtool -I $GAME_PID
			if [ "$?" -eq 0 ];then
			    echo 95 > /proc/sys/kernel/iso_cpu
			    ISO_cpu=1
			else
			    ISO_cpu=0
			fi
		    fi
		fi

		##we set the program to realtime on highest priority, this plus bfq or kyber bumps the
		##performance A LOT on mehcanical hdds 
		
		if [[ $NVME == 0 ]];then
		    echo "setting ioprio" 
		    ionice -c 1 -n 0 -p $GAME_PID
		fi
		
		## We set the powermizer level for nvidia gpus
		if [ $GPU == "nvidia" ];then
		    echo "setting Power Mizer to max performance" 
		    POWER_MIZER
		fi

		break ##break the search loop
		
	    else
		DETECTED=""
	    fi
            #####################
            #sleep 0.2
        # we now read the variable instead of opening the file over and over 
        done <<< "$GAME_DATABASE"
        sleep 5
    else
	detector "$GAME"
        if [[ $PID != "" ]] ; then
            ##temp control only when a game is running
            temp_control
            sleep 5
        else
            echo "$GAME_NAME closed"
            temp_control "on"
            if [ $NVME == 0 ];then 
                if [ $SET_IOSCHD == 1 ];then
                    echo "Reverting to original I/O scheduler: $ORIG_SCHED"
                    echo $ORIG_SCHED > /sys/block/"$GAME_DISK_ROOT"/queue/scheduler
                fi
            fi
            if [ $SET_PERF == 1 ];then
                echo "Reverting to original CPU governor: $ORIG_GOVN"
                for i in `ls -d1 /sys/devices/system/cpu/cpu[0-9]*`; do
                    echo "$ORIG_GOVN" > "$i"/cpufreq/scaling_governor
                done
            fi
            if [ $ISO_cpu == 1 ];then
                echo "Reverting iso_cpu to default value 70"
                echo 70 > /proc/sys/kernel/iso_cpu
            fi
            if [ $GPU == "nvidia" ];then
                echo "Reverting to original Power Mizer level"
                nvidia-settings -a "[gpu]/GpuPowerMizerMode=$CURR_PO_MIZER"
            fi
            echo "back into detection mode" 
            DETECTED=""
        fi
    fi
done
